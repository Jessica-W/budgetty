// <auto-generated />
using System;
using Budgetty.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Budgetty.Persistance.Migrations
{
    [DbContext(typeof(BudgettyDbContext))]
    partial class BudgettyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Budgetty.Domain.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Budgetty.Domain.BankAccountSnapShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BalanceInPennies")
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinancialsSnapshotId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("FinancialsSnapshotId");

                    b.ToTable("BankAccountSnapShot");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.BudgetaryEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FinancialsSnapshotId")
                        .HasColumnType("char(36)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialsSnapshotId");

                    b.ToTable("BudgetaryEvents");

                    b.HasDiscriminator<string>("EventType").HasValue("BudgetaryEvent");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BudgetaryPools");
                });

            modelBuilder.Entity("Budgetty.Domain.FinancialsSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UnallocatedIncomeInPennies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinancialsSnapshots");
                });

            modelBuilder.Entity("Budgetty.Domain.PoolSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BalanceInPennies")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinancialsSnapshotId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialsSnapshotId");

                    b.HasIndex("PoolId");

                    b.ToTable("PoolSnapshot");
                });

            modelBuilder.Entity("Budgetty.Domain.SequenceNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SequenceNumbers");
                });

            modelBuilder.Entity("Budgetty.Domain.SnapshotLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SnapshotLocks");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.ExpenditureEvent", b =>
                {
                    b.HasBaseType("Budgetty.Domain.BudgetaryEvents.BudgetaryEvent");

                    b.Property<int>("AmountInPennies")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AmountInPennies");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.HasIndex("PoolId");

                    b.HasIndex("SequenceNumber")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("expenditure_event");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.IncomeAllocationEvent", b =>
                {
                    b.HasBaseType("Budgetty.Domain.BudgetaryEvents.BudgetaryEvent");

                    b.Property<int>("AmountInPennies")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AmountInPennies");

                    b.Property<int>("PoolId")
                        .HasColumnType("int")
                        .HasColumnName("IncomeAllocationEvent_PoolId");

                    b.HasIndex("PoolId");

                    b.HasDiscriminator().HasValue("income_allocation_event");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.IncomeEvent", b =>
                {
                    b.HasBaseType("Budgetty.Domain.BudgetaryEvents.BudgetaryEvent");

                    b.Property<int>("AmountInPennies")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AmountInPennies");

                    b.Property<int?>("DebtPoolId")
                        .HasColumnType("int");

                    b.HasIndex("DebtPoolId");

                    b.HasDiscriminator().HasValue("income_event");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.PoolTransferEvent", b =>
                {
                    b.HasBaseType("Budgetty.Domain.BudgetaryEvents.BudgetaryEvent");

                    b.Property<int>("AmountInPennies")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("AmountInPennies");

                    b.Property<int>("DestinationPoolId")
                        .HasColumnType("int");

                    b.Property<int>("SourcePoolId")
                        .HasColumnType("int");

                    b.HasIndex("DestinationPoolId");

                    b.HasIndex("SourcePoolId");

                    b.HasDiscriminator().HasValue("pool_transfer_event");
                });

            modelBuilder.Entity("Budgetty.Domain.BankAccountSnapShot", b =>
                {
                    b.HasOne("Budgetty.Domain.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budgetty.Domain.FinancialsSnapshot", null)
                        .WithMany("BankAccountSnapShots")
                        .HasForeignKey("FinancialsSnapshotId");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.BudgetaryEvent", b =>
                {
                    b.HasOne("Budgetty.Domain.FinancialsSnapshot", null)
                        .WithMany("BudgetaryEvents")
                        .HasForeignKey("FinancialsSnapshotId");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryPool", b =>
                {
                    b.HasOne("Budgetty.Domain.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Budgetty.Domain.PoolSnapshot", b =>
                {
                    b.HasOne("Budgetty.Domain.FinancialsSnapshot", null)
                        .WithMany("PoolSnapshots")
                        .HasForeignKey("FinancialsSnapshotId");

                    b.HasOne("Budgetty.Domain.BudgetaryPool", "Pool")
                        .WithMany()
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.ExpenditureEvent", b =>
                {
                    b.HasOne("Budgetty.Domain.BudgetaryPool", "Pool")
                        .WithMany()
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.IncomeAllocationEvent", b =>
                {
                    b.HasOne("Budgetty.Domain.BudgetaryPool", "Pool")
                        .WithMany()
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.IncomeEvent", b =>
                {
                    b.HasOne("Budgetty.Domain.BudgetaryPool", "DebtPool")
                        .WithMany()
                        .HasForeignKey("DebtPoolId");

                    b.Navigation("DebtPool");
                });

            modelBuilder.Entity("Budgetty.Domain.BudgetaryEvents.PoolTransferEvent", b =>
                {
                    b.HasOne("Budgetty.Domain.BudgetaryPool", "DestinationPool")
                        .WithMany()
                        .HasForeignKey("DestinationPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Budgetty.Domain.BudgetaryPool", "SourcePool")
                        .WithMany()
                        .HasForeignKey("SourcePoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationPool");

                    b.Navigation("SourcePool");
                });

            modelBuilder.Entity("Budgetty.Domain.FinancialsSnapshot", b =>
                {
                    b.Navigation("BankAccountSnapShots");

                    b.Navigation("BudgetaryEvents");

                    b.Navigation("PoolSnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
